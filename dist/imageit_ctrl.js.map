{"version":3,"sources":["../src/imageit_ctrl.js"],"names":["isEqualTo","a","b","undefined","isGreaterThan","isLessThan","getMappingOperators","mappingOperators","getRandomId","Math","random","toString","substr","ValueColorMapping","id","name","operatorName","compareTo","isSensorFontBold","fontColor","bgColor","nameBlink","valueBlink","bgBlink","Sensor","metric","xlocation","ylocation","format","size","visible","renderValue","valueFormatted","displayName","link_url","resolvedLink","rectangular","valueMappingIds","isBold","normalizeColor","color","toLowerCase","_","MetricsPanelCtrl","getWidth","panelDefaults","colorMappings","colorMappingMap","valueMappings","metricValues","seriesList","series","bgimage","sensors","templateSrv","sizecoefficient","uncache","operator","fn","isTheFirstRender","ImageItCtrl","$scope","$injector","$sce","defaults","panel","events","on","onInitEditMode","bind","render","onDataReceived","dataList","dataListLength","length","push","target","value","datapoints","refreshImage","index","splice","sensor","addEditorTab","scope","elem","attrs","ctrl","panelContainer","find","image","querySelector","metricMap","keyBy","valueMappingsMap","mapping","mappingOperatorsMap","Object","prototype","hasOwnProperty","call","imageWidth","offsetWidth","sensorWidth","font","panelWidth","width","ylocationStr","xlocationStr","sizeStr","borderRadius","replace","effectiveName","mValue","valueMapping","mappingOperatorName","mappingId","mappingOperator","realFontColor","realBgColor","normalizeSensor","sprintf","dragEventSetup","window","interact","draggable","inertia","restrict","restriction","endOnly","elementRect","top","left","bottom","right","autoScroll","onmove","event","datax","parseFloat","getAttribute","dx","datay","dy","elementTransform","style","webkitTransform","transform","setAttribute","onend","imageHeight","offsetHeight","xpercentage","ypercentage","newX","parseInt","round","newY","renderingCompleted","originalValue","split","map","startsWith","endsWith","icon","indexOf","repeatCount","repeat","slice","imgUrl","imgWidth","imgHeight","join","trustAsHtml","templateUrl"],"mappings":"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","sourcesContent":["/* eslint-disable class-methods-use-this */\n/* eslint-disable func-names */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable import/prefer-default-export */\nimport _ from 'lodash';\nimport {\n    MetricsPanelCtrl\n} from 'app/plugins/sdk';\nimport './sprintf';\nimport './angular-sprintf';\nimport getWidth from './stringwidth/strwidth';\nimport './libs/interact';\n\nconst panelDefaults = {\n    colorMappings: [],\n    colorMappingMap: [],\n    valueMappings: [],\n    metricValues: [],\n    seriesList: [],\n    series: [],\n    bgimage: '',\n    sensors: [],\n    templateSrv: null,\n    sizecoefficient: 20,\n    // uncache is a random number added to the img url to refresh it\n    uncache: 0\n};\n\nconst mappingOperators = [{\n    name: 'equal',\n    operator: '=',\n    fn: isEqualTo\n}, {\n    name: 'greaterThan',\n    operator: '>',\n    fn: isGreaterThan\n}, {\n    name: 'lessThan',\n    operator: '<',\n    fn: isLessThan\n}];\n\nlet isTheFirstRender = true;\n\nexport class ImageItCtrl extends MetricsPanelCtrl {\n    constructor($scope, $injector, $sce, templateSrv) {\n        super($scope, $injector);\n        _.defaults(this.panel, panelDefaults);\n        this.templateSrv = templateSrv;\n        this.$sce = $sce;\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n        this.events.on('panel-initialized', this.render.bind(this));\n        this.events.on('data-received', this.onDataReceived.bind(this));\n        this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n    }\n\n    onDataReceived(dataList) {\n        const dataListLength = dataList.length;\n        this.panel.metricValues = [];\n        for (let series = 0; series < dataListLength; series += 1) {\n            this.panel.metricValues.push({\n                name: dataList[series].target,\n                value: dataList[series].datapoints[dataList[series].datapoints.length - 1][0]\n            });\n        }\n\n        if (!isTheFirstRender) {\n            this.refreshImage();\n        } else {\n            isTheFirstRender = false;\n        }\n\n\n        this.render();\n    }\n\n    refreshImage() {\n        this.panel.uncache = Math.random();\n    }\n\n    deleteSensor(index) {\n        this.panel.sensors.splice(index, 1);\n    }\n\n    addSensor() {\n        this.panel.sensors.push(\n            new Sensor('A', 50, 25, '%.2f', 'rgba(64,64,64,1.000)', 'rgba(255,255,255,1.000)', 14, true)\n        );\n    }\n\n    moveSensorUp(index) {\n        const sensor = this.panel.sensors[index];\n        this.panel.sensors.splice(index, 1);\n        this.panel.sensors.splice(index - 1, 0, sensor);\n    }\n\n    moveSensorDown(index) {\n        const sensor = this.panel.sensors[index];\n        this.panel.sensors.splice(index, 1);\n        this.panel.sensors.splice(index + 1, 0, sensor);\n    }\n\n    onInitEditMode() {\n        this.addEditorTab('Sensor', 'public/plugins/pierosavi-imageit-panel/editor.html', 2);\n        this.addEditorTab('Value Mapping', 'public/plugins/pierosavi-imageit-panel/mappings.html', 3);\n    }\n\n    link(scope, elem, attrs, ctrl) {\n        const panelContainer = (elem.find('.pierosavi-imageit-panel')[0]);\n        const image = (panelContainer.querySelector('#imageit-image'));\n\n        function render() {\n            if (!ctrl.panel.sensors) {\n                return;\n            }\n\n            const metricMap = _.keyBy(ctrl.panel.metricValues, value => value.name);\n            const valueMappingsMap = _.keyBy(ctrl.panel.valueMappings, mapping => mapping.id);\n            const mappingOperatorsMap = _.keyBy(mappingOperators, operator => operator.name);\n\n            for (const sensor of ctrl.panel.sensors) {\n                if (!Object.prototype.hasOwnProperty.call(sensor, 'id')) {\n                    sensor.id = getRandomId();\n                }\n\n                if (image != null) {\n                    const imageWidth = image.offsetWidth;\n                    sensor.size = imageWidth * ctrl.panel.sizecoefficient / 1600;\n                }\n\n                const sensorWidth = getWidth(sensor.displayName, {\n                    font: 'Arial',\n                    size: sensor.size\n                }) + 20;\n\n                sensor.panelWidth = sensorWidth + 'px';\n                sensor.width = sensorWidth;\n\n                sensor.ylocationStr = sensor.ylocation.toString() + 'px';\n                sensor.xlocationStr = sensor.xlocation.toString() + 'px';\n\n                sensor.sizeStr = sensor.size.toString() + 'px';\n\n                if (sensor.rectangular) {\n                    sensor.borderRadius = '5%';\n                } else {\n                    sensor.borderRadius = '50%';\n                }\n\n                if (sensor.link_url !== undefined) {\n                    sensor.resolvedLink = ctrl.templateSrv.replace(sensor.link_url);\n                }\n\n                // We need to replace possible variables in the sensors name\n                const effectiveName = ctrl.templateSrv.replace(sensor.metric);\n\n                let mValue = metricMap[effectiveName];\n                if (mValue === undefined) {\n                    mValue = {\n                        name: 'dummy',\n                        value: 'null'\n                    };\n                }\n\n                // update existing valueMappings\n                for (const valueMapping of ctrl.panel.valueMappings) {\n                    if (valueMapping.mappingOperatorName == null) {\n                        valueMapping.mappingOperatorName = mappingOperators[0].name;\n                    }\n\n                    if (valueMapping.id == null) {\n                        valueMapping.id = getRandomId();\n                    }\n                }\n\n                if (sensor.valueMappingIds === undefined) {\n                    sensor.valueMappingIds = [];\n                }\n\n                if (sensor.valueMappingIds.length > 0) {\n                    for (const mappingId of sensor.valueMappingIds) {\n                        const valueMapping = valueMappingsMap[mappingId];\n\n                        if (valueMapping === undefined) {\n                            break;\n                        }\n\n                        const mappingOperator = mappingOperatorsMap[valueMapping.mappingOperatorName];\n\n                        if (mappingOperator.fn(mValue.value, valueMapping.compareTo)) {\n                            sensor.realFontColor = valueMapping.fontColor;\n                            sensor.realBgColor = valueMapping.bgColor;\n\n                            sensor.nameBlink = valueMapping.nameBlink;\n                            sensor.valueBlink = valueMapping.valueBlink;\n                            sensor.bgBlink = valueMapping.bgBlink;\n\n                            sensor.isBold = valueMapping.isSensorFontBold;\n\n                            break;\n                        } else {\n                            normalizeSensor(sensor);\n                        }\n                    }\n                } else {\n                    normalizeSensor(sensor);\n                }\n\n\n                // finally format the value itself\n                // I'll delete this later\n                // eslint-disable-next-line no-undef\n                sensor.valueFormatted = sprintf(sensor.format, mValue.value);\n            }\n\n            dragEventSetup();\n        }\n\n        function normalizeSensor(sensor) {\n            // new sensor property so it doesn't lose the original one\n            // https://github.com/pierosavi/pierosavi-imageit-panel/issues/4\n            sensor.realBgColor = sensor.bgColor;\n            sensor.realFontColor = sensor.fontColor;\n\n            sensor.nameBlink = false;\n            sensor.valueBlink = false;\n            sensor.bgBlink = false;\n\n            sensor.isBold = false;\n        }\n\n        function dragEventSetup() {\n            window.interact('#imageit_panel' + ctrl.panel.id + '_sensor').draggable({\n                // I dont like it personally but this could be configurable in the future\n                inertia: false,\n                restrict: {\n                    restriction: '#draggableparent',\n                    endOnly: true,\n                    elementRect: {\n                        top: 0,\n                        left: 0,\n                        bottom: 1,\n                        right: 1\n                    }\n                },\n                autoScroll: true,\n                onmove: function (event) {\n                    const {target} = event;\n                    // keep the dragged position in the data-x/data-y attributes\n                    const datax = (parseFloat(target.getAttribute('data-x')) || 0) + event.dx;\n                    const datay = (parseFloat(target.getAttribute('data-y')) || 0) + event.dy;\n\n                    // translate the element\n                    const elementTransform = 'translate(' + datax + 'px, ' + datay + 'px)';\n                    target.style.webkitTransform = elementTransform;\n                    target.style.transform = elementTransform;\n\n                    // update the position attributes\n                    target.setAttribute('data-x', datax);\n                    target.setAttribute('data-y', datay);\n                },\n                onend: function (event) {\n                    const {target} = event;\n\n                    const imageHeight = image.offsetHeight;\n                    const imageWidth = image.offsetWidth;\n\n                    const datax = target.getAttribute('data-x');\n                    const datay = target.getAttribute('data-y');\n\n                    // get percentage of relative distance from starting point\n                    const xpercentage = (datax * 100) / imageWidth;\n                    const ypercentage = (datay * 100) / imageHeight;\n\n                    // browsers dont render more than 4 decimals so better cut away the others\n                    let newX = parseInt(target.style.left, 10) + xpercentage;\n                    newX = Math.round(newX * 10000) / 10000;\n\n                    let newY = parseInt(target.style.top, 10) + ypercentage;\n                    newY = Math.round(newY * 10000) / 10000;\n\n                    const elementTransform = 'translate(0px, 0px)';\n                    target.style.webkitTransform = elementTransform;\n                    target.style.transform = elementTransform;\n\n                    // manually set the new style so I don't need to render() again\n                    target.style.left = newX + '%';\n                    target.style.top = newY + '%';\n\n                    // really update the sensor values\n\n                    // find sensor with the id from the refId attribute on html\n                    const sensor = _.find(ctrl.panel.sensors, {\n                        'id': (event.target).getAttribute('refId')\n                    });\n\n                    sensor.xlocation = newX;\n                    sensor.ylocation = newY;\n\n                    // reset the starting sensor points\n                    target.setAttribute('data-x', 0);\n                    target.setAttribute('data-y', 0);\n                }\n            });\n        }\n\n        this.events.on('render', function () {\n            render();\n            ctrl.renderingCompleted();\n        });\n    }\n\n    //------------------\n    // Mapping stuff\n    //------------------\n\n    addValueMappingMap() {\n        this.panel.valueMappings.push(new ValueColorMapping());\n    }\n\n    removeValueMappingMap(index) {\n        this.panel.valueMappings.splice(index, 1);\n        this.render();\n    }\n\n    replaceTokens(originalValue) {\n        let value = originalValue;\n\n        if (!value) {\n            return value;\n        }\n        value += '';\n        value = value.split(' ').map((a) => {\n            if (a.startsWith('_fa-') && a.endsWith('_')) {\n                const icon = a.replace(/_/g, '').split(',')[0];\n                const color = a.indexOf(',') > -1 ? ` style=\"color:${normalizeColor(a.replace(/_/g, '').split(',')[1])}\" ` : '';\n                const repeatCount = a.split(',').length > 2 ? +(a.replace(/_/g, '').split(',')[2]) : 1;\n                a = `<i class=\"fa ${icon}\" ${color}></i> `.repeat(repeatCount);\n            } else if (a.startsWith('_img-') && a.endsWith('_')) {\n                a = a.slice(0, -1);\n                const imgUrl = a.replace('_img-', '').split(',')[0];\n                const imgWidth = a.split(',').length > 1 ? a.replace('_img-', '').split(',')[1] : '20px';\n                const imgHeight = a.split(',').length > 2 ? a.replace('_img-', '').split(',')[2] : '20px';\n                const repeatCount = a.split(',').length > 3 ? +(a.replace('_img-', '').split(',')[3]) : 1;\n                a = `<img width=\"${imgWidth}\" height=\"${imgHeight}\" src=\"${imgUrl}\"/>`.repeat(repeatCount);\n            }\n            return a;\n        }).join(' ');\n\n        return this.$sce.trustAsHtml(value);\n    }\n\n    getMappingOperators() {\n        return getMappingOperators();\n    }\n}\n\nfunction isEqualTo(a, b) {\n    // Could be ok if Im comparing strings and numbers\n    // eslint-disable-next-line eqeqeq\n    return (a !== undefined && b !== undefined) ? a == b : false;\n}\n\nfunction isGreaterThan(a, b) {\n    return (a !== undefined && b !== undefined) ? a > b : false;\n}\n\nfunction isLessThan(a, b) {\n    return (a !== undefined && b !== undefined) ? a < b : false;\n}\n\nfunction getMappingOperators() {\n    return mappingOperators;\n}\n\nfunction getRandomId() {\n    return '_' + Math.random().toString(36).substr(2, 9);\n}\n\nfunction ValueColorMapping() {\n    // TODO: check if it doesnt exist yet\n    this.id = getRandomId();\n    this.name = undefined;\n    this.operatorName = mappingOperators[0].name;\n    this.compareTo = undefined;\n    this.isSensorFontBold = false;\n    this.fontColor = '#000';\n    this.bgColor = '#fff';\n    this.nameBlink = false;\n    this.valueBlink = false;\n    this.bgBlink = false;\n}\n\nfunction Sensor(metric,\n    xlocation,\n    ylocation,\n    format,\n    bgColor,\n    fontColor,\n    size,\n    visible) {\n    this.metric = metric;\n    this.xlocation = xlocation;\n    this.ylocation = ylocation;\n    this.format = format;\n    this.bgColor = bgColor;\n    this.fontColor = fontColor;\n    this.size = size;\n    this.visible = visible;\n    this.renderValue = true;\n    this.valueFormatted = '';\n    this.displayName = '';\n    this.link_url = '';\n    this.resolvedLink = '';\n    this.rectangular = true;\n    this.valueMappingIds = [];\n    this.isBold = false;\n    this.id = getRandomId();\n}\n\nfunction normalizeColor(color) {\n    if (color.toLowerCase() === 'green') {\n        return 'rgba(50, 172, 45, 0.97)';\n    } if (color.toLowerCase() === 'orange') {\n        return 'rgba(237, 129, 40, 0.89)';\n    } if (color.toLowerCase() === 'red') {\n        return 'rgba(245, 54, 54, 0.9)';\n    }\n    return color.toLowerCase();\n}\n\nImageItCtrl.templateUrl = 'module.html';\n"],"file":"imageit_ctrl.js"}